@page "/testscoreinfo"

@using System.Net.Http.Json

@inject IStudentService studentService
@inject ITestScoreService testScoreService
@inject IJSRuntime jsRuntime
@inject HttpClient http

<h3><b>Enter TestScore Information</b></h3>
<br/>
<div>
    <EditForm Model="@testScore" OnValidSubmit="@SubmitTestScore">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">*Student Id : </label>
            <InputSelect id="studentId" @bind-Value="testScore.studentId">
                @foreach (var _student in @studentsList)
                {
                    var id = _student.studentId;
                    <option value="@id">@id</option>
                }
            </InputSelect>
        </div>
        <br/>
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">*Subject Id : </label>
            <InputSelect id="subjectId" @bind-Value="testScore.subjectId">
                @foreach (var id in Enum.GetValues(typeof(SubjectId)))
                {
                    <option value="@id">@id</option>
                }
            </InputSelect> 
        </div>
        <br/>
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">*Score : </label>
            <InputNumber id="score" @bind-Value="testScore.score" placeholder="score"/>
        </div>
        <br/>
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">*Semester : </label>
            <InputNumber id="semester" @bind-Value="testScore.semester" placeholder="semester"/>
        </div>
        <br/>
        <div class="col-12 row">
            <span class="col-2"></span>
            <input type="submit" class="form-control col-1 btn btn-primary" value="Save" />
            <span>&nbsp;</span>
            <button class="btn btn-primary" @onclick="ClearTestScore">Clear</button>
        </div>
    </EditForm>
</div>

<br/>
<hr/>
<br/>

<div class="col-10">
    <h3><b>Scores</b></h3>
    <br/>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Student Id</th>
                <th>Subject Id</th>
                <th>Score</th>
                <th>Semester</th>
                <th>Etc..</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var _score in testScoresList)
            {
                var link = $"/testscoreinfo/{_score.studentId}";
                <tr>
                    <td>@_score.scoreId</td>
                    <td>
                        <NavLink href="@link">
                            @_score.studentId
                        </NavLink>
                    </td>
                    <td>@Enum.GetName(_score.subjectId)</td>
                    <td>@_score.score</td>
                    <td>@_score.semester</td>
                    <td> <button class="btn btn-primary" @onclick="() => RemoveTestScore(_score.scoreId)">Remove</button> </td>
                </tr>
            }
        </tbody>

    </table>
</div>


@code {
    public TestScore testScore{get; set;}
    public List<TestScore> testScoresList = new List<TestScore>();
    public List<Student> studentsList = new List<Student>();
    protected override async Task OnInitializedAsync()
    {
        testScore = new TestScore("0000", SubjectId.Etc, 0, 1901);
        studentsList = await http.GetFromJsonAsync<List<Student>>("https://localhost:5001/api/students");
        studentsList = studentsList.OrderByDescending(student => student.studentId).ToList();

        testScoresList = await http.GetFromJsonAsync<List<TestScore>>("https://localhost:5001/api/TestScores");
        testScoresList = testScoresList.OrderByDescending(testScore => testScore.scoreId).ToList();
        // API testScoresList와 studentsList에 각각 List데이터를 요청하고 저장하는 메소드를 구현. 

        await base.OnInitializedAsync();
    }
    private async Task SubmitTestScore(){
        
        // API에 TestScore testScore를 Create하는 메소드를 구현.
        await http.PostAsJsonAsync<TestScore>("https://localhost:5001/api/TestScores", testScore);
        ClearTestScore();
        return;
    }
    private void ClearTestScore(){
        testScore = new TestScore("0000", SubjectId.Etc, 0, 1901);
    }
    private async Task RemoveTestScore(string id){
        await http.DeleteAsync($"https://localhost:5001/api/TestScores/{id}");
        // API에 scoreId의 TestScore를 제거하는 메소드를 구현.
    }
    private async void PrintDescriptionAsync(ResultCode code){
        await jsRuntime.InvokeVoidAsync("alert", $"{code.id}\n{code.description}!");
    }

}
